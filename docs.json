[{"name":"Ecs","comment":"\n\n@docs EntityId\n@docs Component\n@docs Config\n\n","unions":[],"aliases":[{"name":"Component","comment":" The raw data for one aspect of an `Entity`. I.e. labels the Entity as possessing this particular aspect.\n","args":["data"],"type":"Ecs.Internal.Component data"},{"name":"Config","comment":" Data that is used for managing and operating the ECS internally\n","args":[],"type":"Ecs.Internal.Config"},{"name":"EntityId","comment":" The ID of an entity.\n","args":[],"type":"Ecs.Internal.EntityId"}],"values":[],"binops":[]},{"name":"Ecs.Component","comment":"\n\n    import Ecs.Component\n\n    type alias Velocity =\n        { x : Float, y : Float }\n\n    velocitySpec : Ecs.Component.Spec Velocity { world | velocityComponent : Ecs.Component Velocity }\n    velocitySpec =\n        { get = .velocityComponent\n        , set = \\component world -> { world | velocityComponent = component }\n        }\n\n    initVelocity : Ecs.Component.Component Velocity\n    initVelocity =\n        Ecs.Component.empty\n\n\n# Create\n\n@docs Spec\n\n\n# Build\n\n@docs empty, set, update, remove\n\n\n# Query\n\n@docs get, get2\n\n\n# Transform\n\n@docs map, filter, indexedFilter\n\n\n# List\n\n@docs fromList, toList\n\n\n# Dict\n\n@docs fromDict, toDict\n\n","unions":[],"aliases":[{"name":"Spec","comment":" Component specification, how to get a `Component` from the world and set it back into the world. Used when creating new entities and when running systems.\n","args":["comp","world"],"type":"{ get : world -> Ecs.Internal.Component comp, set : Ecs.Internal.Component comp -> world -> world }"}],"values":[{"name":"empty","comment":" Create an empty `Component` - mostly used to init components in the world.\n","type":"Ecs.Internal.Component comp"},{"name":"filter","comment":" Removes a component from an Entity\n","type":"(comp -> Maybe.Maybe comp) -> Ecs.Internal.Component comp -> Ecs.Internal.Component comp"},{"name":"fromDict","comment":" Create a `Component` from a `Dict`.\n\n**Note**: Useful for data serialization.\n\n","type":"Dict.Dict Basics.Int a -> Ecs.Internal.Component a"},{"name":"fromList","comment":" Create a `Component` from a `List`.\n\n**Note**: Useful for data serialization.\n\n","type":"List.List ( Ecs.Internal.EntityId, a ) -> Ecs.Internal.Component a"},{"name":"get","comment":" Get component for `EntityId`.\n","type":"Ecs.Internal.EntityId -> Ecs.Internal.Component comp -> Maybe.Maybe comp"},{"name":"get2","comment":" Get components Tuple for `EntityId`.\n","type":"Ecs.Internal.EntityId -> Ecs.Internal.Component comp -> Ecs.Internal.Component comp2 -> Maybe.Maybe ( comp, comp2 )"},{"name":"indexedFilter","comment":" Removes a component from an Entity\n","type":"(Ecs.Internal.EntityId -> comp -> Maybe.Maybe comp) -> Ecs.Internal.Component comp -> Ecs.Internal.Component comp"},{"name":"map","comment":" Apply a function on every entity with a `Component`.\n\n    Ecs.Component.fromList [ ( 0, 1 ), ( 1, 14 ), ( 2, 89 ) ]\n        |> Ecs.Component.map (\\age -> age + 1)\n        |> (==) (Ecs.Component.fromList [ ( 0, 2 ), ( 1, 15 ), ( 2, 90 ) ])\n\n","type":"(comp -> comp) -> Ecs.Internal.Component comp -> Ecs.Internal.Component comp"},{"name":"remove","comment":" Remove `Component` from an entity by `EntityId`, or return unchanged if the entity never had a `Component`.\n","type":"Ecs.Internal.EntityId -> Ecs.Internal.Component a -> Ecs.Internal.Component a"},{"name":"set","comment":" Set the value of a component for an `EntityId`.\n","type":"Ecs.Internal.EntityId -> a -> Ecs.Internal.Component a -> Ecs.Internal.Component a"},{"name":"toDict","comment":" Create a `Dict` from a `Component`.\n\n**Note**: Useful for data deserialization.\n\n","type":"Ecs.Internal.Component a -> Dict.Dict Basics.Int a"},{"name":"toList","comment":" Convert a `Component` into an association list of id-component pairs, sorted by id.\n\n**Note**: Useful for data deserialization.\n\n","type":"Ecs.Internal.Component a -> List.List ( Ecs.Internal.EntityId, a )"},{"name":"update","comment":" Update Component by `EntityId`.\n","type":"Ecs.Internal.EntityId -> (comp -> comp) -> Ecs.Internal.Component comp -> Ecs.Internal.Component comp"}],"binops":[]},{"name":"Ecs.Config","comment":"\n\n@docs Spec\n@docs init\n\n","unions":[],"aliases":[{"name":"Spec","comment":" Similar to the `Ecs.Component.Spec` but for `Config`\n","args":["world"],"type":"{ get : world -> Ecs.Internal.Config, set : Ecs.Internal.Config -> world -> world }"}],"values":[{"name":"init","comment":" Initializes your `Ecs` setup\n","type":"Ecs.Internal.Config"}],"binops":[]},{"name":"Ecs.Entity","comment":"\n\n\n# Creation\n\n@docs create\n\n\n# Build\n\n@docs with\n@docs remove\n\n","unions":[],"aliases":[],"values":[{"name":"create","comment":" Creates a new\n\n    Ecs.Entity.create ecsConfigSpec world\n\n","type":"Ecs.Config.Spec world -> world -> ( Ecs.Internal.EntityId, world )"},{"name":"remove","comment":" For creating `Entity` destruction functions, should pipe in all possible component specs.\nIt also can be used to remove some/select components from an entity.\n\n    deleteEntity : ( EntityId, World ) -> ( EntityId, World )\n    deleteEntity =\n        Ecs.Entity.remove positionSpec\n            >> Ecs.Entity.remove velocitySpec\n\n    newWorld : World\n    newWorld =\n        deleteEntity ( id, world )\n\n","type":"Ecs.Component.Spec comp world -> ( Ecs.Internal.EntityId, world ) -> ( Ecs.Internal.EntityId, world )"},{"name":"with","comment":" Adds a component to an entity\n\n    Ecs.Entity.create ecsConfigSpec world\n        |> Ecs.Entity.with ( positionSpec, positionComponent )\n        |> Ecs.Entity.with ( velocitySpec, velocityComponent )\n\n","type":"( Ecs.Component.Spec comp world, comp ) -> ( Ecs.Internal.EntityId, world ) -> ( Ecs.Internal.EntityId, world )"}],"binops":[]},{"name":"Ecs.System","comment":"\n\n@docs System\n@docs update, step, step2, step3, step4, step5\n\n@docs foldl, foldl2, foldl3, foldl4, foldl5\n@docs indexedFoldl, indexedFoldl2, indexedFoldl3, indexedFoldl4, indexedFoldl5\n\n\n# Util\n\n@docs applyIf, applyMaybe\n\n\n# Internal helper types\n\n@docs Acc2, Acc3, Acc4, Acc5\n\n","unions":[],"aliases":[{"name":"Acc2","comment":" Helper for [`step2`](#step2)\n","args":["a","b"],"type":"{ a : Ecs.Component a, b : Ecs.Component b }"},{"name":"Acc3","comment":" Helper for [`step3`](#step3)\n","args":["a","b","c"],"type":"{ a : Ecs.Component a, b : Ecs.Component b, c : Ecs.Component c }"},{"name":"Acc4","comment":" Helper for [`step4`](#step4)\n","args":["a","b","c","d"],"type":"{ a : Ecs.Component a, b : Ecs.Component b, c : Ecs.Component c, d : Ecs.Component d }"},{"name":"Acc5","comment":" Helper for [`step5`](#step5)\n","args":["a","b","c","d","e"],"type":"{ a : Ecs.Component a, b : Ecs.Component b, c : Ecs.Component c, d : Ecs.Component d, e : Ecs.Component e }"},{"name":"System","comment":" A function for updating a `world`\n","args":["world"],"type":"world -> world"}],"values":[{"name":"applyIf","comment":" A helper function to pipe into systems\n\n    update msg world =\n        world\n            |> system1\n            |> applyIf (msg === KeyUp \"a\") systemMoveLeft\n            |> system2\n\n","type":"Basics.Bool -> (a -> a) -> a -> a"},{"name":"applyMaybe","comment":" Same as [`applyIf`](#applyIf), but works with `Maybe`\n\n    update msg world =\n        world\n            |> system1\n            |> applyMaybe (decode saveDecoder msg) loadGame\n            |> system2\n\n","type":"Maybe.Maybe a -> (a -> c -> c) -> c -> c"},{"name":"foldl","comment":" Reduce an `Ecs.Component` from the left.\n\nExample count how many enemies are left in the world:\n\n    enemyComponent : Ecs.Component.Component PlayerType\n    enemyComponent =\n        enemySpec.get world\n\n    remainingEnemyCount : Int\n    remainingEnemyCount =\n        Ecs.System.foldl (\\_ -> (+) 1) enemyComponent 0\n\n","type":"(comp1 -> acc -> acc) -> Ecs.Component comp1 -> acc -> acc"},{"name":"foldl2","comment":" Step over all entities that have both components and reduce the `Component`s from the left.\n","type":"(comp1 -> comp2 -> acc -> acc) -> Ecs.Component comp1 -> Ecs.Component comp2 -> acc -> acc"},{"name":"foldl3","comment":" Same as [`foldl2`](#foldl2) only with 3 components\n","type":"(comp1 -> comp2 -> comp3 -> acc -> acc) -> Ecs.Component comp1 -> Ecs.Component comp2 -> Ecs.Component comp3 -> acc -> acc"},{"name":"foldl4","comment":" Same as [`foldl2`](#foldl2) only with 4 components\n","type":"(comp1 -> comp2 -> comp3 -> comp4 -> acc -> acc) -> Ecs.Component comp1 -> Ecs.Component comp2 -> Ecs.Component comp3 -> Ecs.Component comp4 -> acc -> acc"},{"name":"foldl5","comment":" Same as [`foldl2`](#foldl2) only with 5 components\n","type":"(comp1 -> comp2 -> comp3 -> comp4 -> acc -> acc) -> Ecs.Component comp1 -> Ecs.Component comp2 -> Ecs.Component comp3 -> Ecs.Component comp4 -> acc -> acc"},{"name":"indexedFoldl","comment":" Variant of `foldl` that passes the `EntityId` of the current element to the step function.\n\n`indexedFoldl` is to `foldl` as `List.indexedMap` is to `List.map`.\n\n","type":"(Ecs.Internal.EntityId -> comp1 -> acc -> acc) -> Ecs.Component comp1 -> acc -> acc"},{"name":"indexedFoldl2","comment":" Same as [`indexedFoldl`](#indexedFoldl) only with 2 components\n","type":"(Ecs.Internal.EntityId -> comp1 -> comp2 -> acc -> acc) -> Ecs.Component comp1 -> Ecs.Component comp2 -> acc -> acc"},{"name":"indexedFoldl3","comment":" Same as [`indexedFoldl2`](#indexedFoldl2) only with 3 components\n","type":"(Ecs.Internal.EntityId -> comp1 -> comp2 -> comp3 -> acc -> acc) -> Ecs.Component comp1 -> Ecs.Component comp2 -> Ecs.Component comp3 -> acc -> acc"},{"name":"indexedFoldl4","comment":" Same as [`indexedFoldl2`](#indexedFoldl2) only with 4 components\n","type":"(Ecs.Internal.EntityId -> comp1 -> comp2 -> comp3 -> comp4 -> acc -> acc) -> Ecs.Component comp1 -> Ecs.Component comp2 -> Ecs.Component comp3 -> Ecs.Component comp4 -> acc -> acc"},{"name":"indexedFoldl5","comment":" Same as [`indexedFoldl2`](#indexedFoldl2) only with 5 components\n","type":"(Ecs.Internal.EntityId -> comp1 -> comp2 -> comp3 -> comp4 -> comp5 -> acc -> acc) -> Ecs.Component comp1 -> Ecs.Component comp2 -> Ecs.Component comp3 -> Ecs.Component comp4 -> Ecs.Component comp5 -> acc -> acc"},{"name":"step","comment":" Single component mapping, similar to `List.map` - only for `Ecs.Component.Component` inside `world`\n\n    gravitySystem : Ecs.System.System world\n    gravitySystem =\n        Logic.System.step (Vec2.add gravity) accelerationSpec\n\n","type":"(comp -> comp) -> Ecs.Component.Spec comp world -> world -> world"},{"name":"step2","comment":" Step over all entities that have both components.\n\nExample:\n\n    moveSystem : Ecs.System.System World\n    moveSystem =\n        Logic.System.step2\n            (\\( velocity, _ ) ( position, setPosition ) ->\n                setPosition (Vec2.add velocity position)\n            )\n            velocitySpec\n            positionSpec\n\n","type":"(( a, a -> Ecs.System.System (Ecs.System.Acc2 a b) ) -> ( b, b -> Ecs.System.System (Ecs.System.Acc2 a b) ) -> Ecs.System.System (Ecs.System.Acc2 a b)) -> Ecs.Component.Spec a world -> Ecs.Component.Spec b world -> world -> world"},{"name":"step3","comment":" Same as [`step2`](#step2) only with 3 components\n","type":"(( a, a -> Ecs.System.System (Ecs.System.Acc3 a b c) ) -> ( b, b -> Ecs.System.System (Ecs.System.Acc3 a b c) ) -> ( c, c -> Ecs.System.System (Ecs.System.Acc3 a b c) ) -> Ecs.System.System (Ecs.System.Acc3 a b c)) -> Ecs.Component.Spec a world -> Ecs.Component.Spec b world -> Ecs.Component.Spec c world -> world -> world"},{"name":"step4","comment":" Same as [`step2`](#step2) only with 4 components\n","type":"(( a, a -> Ecs.System.System (Ecs.System.Acc4 a b c d) ) -> ( b, b -> Ecs.System.System (Ecs.System.Acc4 a b c d) ) -> ( c, c -> Ecs.System.System (Ecs.System.Acc4 a b c d) ) -> ( d, d -> Ecs.System.System (Ecs.System.Acc4 a b c d) ) -> Ecs.System.System (Ecs.System.Acc4 a b c d)) -> Ecs.Component.Spec a world -> Ecs.Component.Spec b world -> Ecs.Component.Spec c world -> Ecs.Component.Spec d world -> world -> world"},{"name":"step5","comment":" Same as [`step2`](#step2) only with 5 components\n","type":"(( a, a -> Ecs.System.System (Ecs.System.Acc5 a b c d e) ) -> ( b, b -> Ecs.System.System (Ecs.System.Acc5 a b c d e) ) -> ( c, c -> Ecs.System.System (Ecs.System.Acc5 a b c d e) ) -> ( d, d -> Ecs.System.System (Ecs.System.Acc5 a b c d e) ) -> ( e, e -> Ecs.System.System (Ecs.System.Acc5 a b c d e) ) -> Ecs.System.System (Ecs.System.Acc5 a b c d e)) -> Ecs.Component.Spec a world -> Ecs.Component.Spec b world -> Ecs.Component.Spec c world -> Ecs.Component.Spec d world -> Ecs.Component.Spec e world -> world -> world"},{"name":"update","comment":" Update whole `Ecs.Component`\n","type":"Ecs.Component.Spec comp world -> (Ecs.Component comp -> Ecs.Component comp) -> world -> world"}],"binops":[]}]
